<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.obsidian.scss.dao.ConversationMapper">
  <resultMap id="BaseResultMap" type="org.obsidian.scss.entity.Conversation">
    <result column="conversation_id" jdbcType="INTEGER" property="conversationId" />
    <result column="client_id" jdbcType="INTEGER" property="clientId" />
    <result column="service_id" jdbcType="INTEGER" property="serviceId" />
    <result column="start_time" jdbcType="BIGINT" property="startTime" />
    <result column="stop_time" jdbcType="BIGINT" property="stopTime" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <collection property="chatLogList" ofType="org.obsidian.scss.entity.ChatLog">
      <id column="chat_log_id" property="chatLogId"/>
      <result column="conversation_id" property="conversationId"/>
      <result column="sender_id" property="senderId"/>
      <result column="receiver_id" property="receiverId"/>
      <result column="content_type" property="contentType"/>
      <result column="content" property="content"/>
      <result column="time" property="time"/>
    </collection>
  </resultMap>
  <select id="selectByClientId" resultMap="BaseResultMap">
    select conversation.*, chat_log.* from conversation, chat_log
    where conversation.conversation_id=chat_log.conversation_id
    and conversation.client_id=#{clientId};
  </select>
  <select id="selectByServiceId" resultMap="BaseResultMap">
    select conversation.*, chat_log.* from conversation, chat_log
    where conversation.conversation_id=chat_log.conversation_id
    and conversation.service_id=#{serviceId};
  </select>
  <select id="selectByConversationId" resultMap="BaseResultMap">
    select conversation.*, chat_log.* from conversation, chat_log
    where conversation.conversation_id=chat_log.conversation_id
    and conversation.conversation_id=#{conversationId};
  </select>
  <select id="selectCountByServiceId" resultType="java.lang.Integer">
    select count(*) from conversation
    where conversation.service_id=#{serviceId};
  </select>
  <select id="selectAvgScoreByServiceId" resultType="java.lang.Integer">
    select AVG(score) from conversation where service_id=#{serviceId}
    and score IS NOT NULL ;
  </select>
  <update id="updateStopTime">
    update conversation set stop_time = #{stopTime}, score=#{score}
    where conversation_id=#{conversationId};
  </update>
  <update id="updateStopTimeWithoutScore">
    update conversation set stop_time = #{stopTime}
    where conversation_id=#{conversationId};
  </update>
  <select id="selectLastIdByClientId" resultType="java.lang.Integer">
    select max(conversation_id) from conversation where client_id=#{clientId} and stop_time IS NULL;
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    conversation_id, client_id, service_id, start_time, stop_time, score
  </sql>
  <select id="selectByExample" parameterType="org.obsidian.scss.entity.ConversationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from conversation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="org.obsidian.scss.entity.ConversationExample">
    delete from conversation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.obsidian.scss.entity.Conversation">
    insert into conversation (conversation_id, client_id, service_id, 
      start_time, stop_time, score
      )
    values (#{conversationId,jdbcType=INTEGER}, #{clientId,jdbcType=INTEGER}, #{serviceId,jdbcType=INTEGER}, 
      #{startTime,jdbcType=BIGINT}, #{stopTime,jdbcType=BIGINT}, #{score,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.obsidian.scss.entity.Conversation">
    insert into conversation
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="conversationId != null">
        conversation_id,
      </if>
      <if test="clientId != null">
        client_id,
      </if>
      <if test="serviceId != null">
        service_id,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="stopTime != null">
        stop_time,
      </if>
      <if test="score != null">
        score,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="conversationId != null">
        #{conversationId,jdbcType=INTEGER},
      </if>
      <if test="clientId != null">
        #{clientId,jdbcType=INTEGER},
      </if>
      <if test="serviceId != null">
        #{serviceId,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=BIGINT},
      </if>
      <if test="stopTime != null">
        #{stopTime,jdbcType=BIGINT},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.obsidian.scss.entity.ConversationExample" resultType="java.lang.Long">
    select count(*) from conversation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update conversation
    <set>
      <if test="record.conversationId != null">
        conversation_id = #{record.conversationId,jdbcType=INTEGER},
      </if>
      <if test="record.clientId != null">
        client_id = #{record.clientId,jdbcType=INTEGER},
      </if>
      <if test="record.serviceId != null">
        service_id = #{record.serviceId,jdbcType=INTEGER},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=BIGINT},
      </if>
      <if test="record.stopTime != null">
        stop_time = #{record.stopTime,jdbcType=BIGINT},
      </if>
      <if test="record.score != null">
        score = #{record.score,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update conversation
    set conversation_id = #{record.conversationId,jdbcType=INTEGER},
      client_id = #{record.clientId,jdbcType=INTEGER},
      service_id = #{record.serviceId,jdbcType=INTEGER},
      start_time = #{record.startTime,jdbcType=BIGINT},
      stop_time = #{record.stopTime,jdbcType=BIGINT},
      score = #{record.score,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <!--Create By Cjn-->
  <select id="selectConversationNotFinish" resultType="int">
    SELECT  COUNT(*) FROM conversation WHERE  stop_time IS  NULL ;
  </select>
  <select id="selectRecentMonth" parameterType="long" resultType="org.obsidian.scss.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    month,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt; 1
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d');
  </select>
  
  <select id="selectRecentWeekend"  parameterType="long" resultType="org.obsidian.scss.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    day,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))
    ) &lt; 7
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d');
  </select>
  
  <select id="selectRecentHour" parameterType="long" resultType="org.obsidian.scss.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    hour,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt;24
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d%h');
  </select>

  <select id="selectRecentMinute" parameterType="long" resultType="org.obsidian.scss.entity.DayAndTime">
    SELECT
    stop_time as time,COUNT(*) as times
    FROM
    conversation
    WHERE
    TIMESTAMPDIFF(
    MINUTE,
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed)),
    FROM_UNIXTIME(CAST((#{timestamp}/1000) AS signed))

    ) &lt;10
    GROUP BY
    FROM_UNIXTIME(CAST((stop_time/1000) AS signed),'%Y%m%d%h%i');
  </select>
</mapper>